import { z } from 'zod';
import { usePort } from '@maxdev1/sotajs/lib/di.v2';
import { 
  SingleChoiceDto,
  MultiChoiceDto,
  FreeTextDto,
  InfoMessageDto,
  DialogEndDto,
  TransferToOperatorDto
} from '../dtos/platform-agnostic.dtos';
import {
  findUserByIdPort,
  saveUserPort,
  findDialogSessionByIdPort,
  findActiveDialogSessionByUserIdPort,
  createDialogSessionPort,
  updateDialogSessionPort,
  saveMessagePort,
  loggerPort
} from '../../domain/ports/bot.ports';
import { User, DialogSession, Message } from '../../domain/entities/bot.entities';
import { UserId, DialogSessionId, MessageId } from '../../domain/shared/ids';

// DTO –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (platform-agnostic)
const IncomingUserActionDtoSchema = z.object({
  userId: z.string(),
  platform: z.string(),
  actionType: z.enum(['text', 'choice', 'button']),
  payload: z.string().optional(),
  timestamp: z.date(),
});

type IncomingUserActionDto = z.infer<typeof IncomingUserActionDtoSchema>;

// Use Case 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç platform-agnostic DTO –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
export const handleUserActionUseCase = async (input: unknown): Promise<
  SingleChoiceDto | InfoMessageDto | DialogEndDto | null
> => {
  const validInput = IncomingUserActionDtoSchema.parse(input);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  const findUserById = usePort(findUserByIdPort);
  const saveUser = usePort(saveUserPort);
  const findActiveDialogSession = usePort(findActiveDialogSessionByUserIdPort);
  const createDialogSession = usePort(createDialogSessionPort);
  const updateDialogSession = usePort(updateDialogSessionPort);
  const saveMessage = usePort(saveMessagePort);
  const log = usePort(loggerPort);
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
  log(`Handling user action from ${validInput.userId}`, { input: validInput });
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let user = await findUserById(validInput.userId);
  if (!user) {
    user = User.create({
      id: UserId.create(validInput.userId).value,
      platform: validInput.platform as any, // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è
      createdAt: new Date(),
      lastActiveAt: new Date(),
    });
    await saveUser(user);
  } else {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    user.actions.updateLastActive();
    await saveUser(user);
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–∏–∞–ª–æ–≥–∞
  let session = await findActiveDialogSession(validInput.userId);
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
  if (!session) {
    session = DialogSession.create({
      id: DialogSessionId.create(crypto.randomUUID()).value,
      userId: UserId.create(validInput.userId).value,
      currentState: 'started',
      currentStep: 'welcome',
      createdAt: new Date(),
      updatedAt: new Date(),
    });
    session = await createDialogSession(session);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const welcomeMessage: InfoMessageDto = {
      title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
      content: "–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.\n\n–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫ —á–∞—Ç-–±–æ—Ç—ã –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å—É –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω—É –∏ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏.\n\n–ì–æ—Ç–æ–≤—ã –∑–∞ 2 –º–∏–Ω—É—Ç—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –∏–º–µ–Ω–Ω–æ –≤–∞–º?",
    };
    
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
    const choice: SingleChoiceDto = {
      question: "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
      options: [
        { id: "audit", text: "üöÄ –î–∞, –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç –º–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞", value: "audit" },
        { id: "demo", text: "ü§î –ü—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ —É–º–µ—é—Ç –±–æ—Ç—ã", value: "demo" },
        { id: "contact", text: "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º", value: "contact" }
      ]
    };
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º—ã –±—ã –≤–µ—Ä–Ω—É–ª–∏ –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π driving adapter –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç
    // –ù–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º choice
    return choice;
  }
  
  // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
  switch (session.state.currentStep) {
    case 'welcome':
      return await handleWelcomeStep(session, validInput, { 
        updateDialogSession, 
        saveMessage
      });
      
    case 'business_type':
      return await handleBusinessTypeStep(session, validInput, { 
        updateDialogSession, 
        saveMessage
      });
      
    default:
      // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
      const defaultMessage: InfoMessageDto = {
        content: "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤?",
      };
      return defaultMessage;
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–≥–æ–≤
async function handleWelcomeStep(
  session: typeof DialogSession,
  input: IncomingUserActionDto,
  ports: {
    updateDialogSession: (session: typeof DialogSession) => Promise<typeof DialogSession>,
    saveMessage: (message: typeof Message) => Promise<void>
  }
): Promise<SingleChoiceDto | InfoMessageDto | null> {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const message = Message.create({
    id: MessageId.create(crypto.randomUUID()).value,
    sessionId: session.state.id,
    userId: session.state.userId,
    text: input.payload,
    direction: 'incoming',
    timestamp: input.timestamp,
  });
  await ports.saveMessage(message);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  switch (input.payload) {
    case 'audit':
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      session.actions.advanceToStep('business_type');
      await ports.updateDialogSession(session);
      
      const businessTypeChoice: SingleChoiceDto = {
        question: "–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã –¥–∞—Ç—å —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞.\n\n–î–ª—è –Ω–∞—á–∞–ª–∞, –≤ –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –≤–∞—à –±–∏–∑–Ω–µ—Å?",
        options: [
          { id: "online_school", text: "–û–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞/–ö—É—Ä—Å—ã", value: "online_school" },
          { id: "ecommerce", text: "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω", value: "ecommerce" },
          { id: "services", text: "–£—Å–ª—É–≥–∏ (—Å–∞–ª–æ–Ω, —Ñ–∏—Ç–Ω–µ—Å)", value: "services" },
          { id: "b2b", text: "B2B", value: "b2b" },
          { id: "other", text: "–î—Ä—É–≥–æ–µ", value: "other" }
        ]
      };
      
      return businessTypeChoice;
      
    case 'demo':
      session.actions.advanceToStep('demo_mode');
      await ports.updateDialogSession(session);
      
      const demoMessage: InfoMessageDto = {
        content: "–•–æ—Ä–æ—à–æ! –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ç–æ–≥–æ, —á—Ç–æ —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å:\n\n1. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n2. –°–æ–±–∏—Ä–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤\n3. –ü—Ä–æ–≤–æ–¥–∏—Ç—å –æ–ø—Ä–æ—Å—ã –∏ –∫–≤–∏–∑—ã\n4. –ü—Ä–∏–Ω–∏–º–∞—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã\n\n–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–∞–∫–æ–π-—Ç–æ –∏–∑ —ç—Ç–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤?",
      };
      
      return demoMessage;
      
    case 'contact':
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã –±—ã–ª transfer DTO
      const contactMessage: InfoMessageDto = {
        content: "–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–µ—Ä–µ–¥–∞–º –≤–∞—à –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n\n–ß—Ç–æ–±—ã –µ–º—É –±—ã–ª–æ –ø—Ä–æ—â–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Ä–∞–∑–≥–æ–≤–æ—Ä—É, –Ω–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ –∑–¥–µ—Å—å.\n\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É, –∏ –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ Telegram –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
      };
      return contactMessage;
      
    default:
      return null;
  }
}

async function handleBusinessTypeStep(
  session: typeof DialogSession,
  input: IncomingUserActionDto,
  ports: {
    updateDialogSession: (session: typeof DialogSession) => Promise<typeof DialogSession>,
    saveMessage: (message: typeof Message) => Promise<void>
  }
): Promise<SingleChoiceDto | InfoMessageDto | null> {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const message = Message.create({
    id: MessageId.create(crypto.randomUUID()).value,
    sessionId: session.state.id,
    userId: session.state.userId,
    text: input.payload,
    direction: 'incoming',
    timestamp: input.timestamp,
  });
  await ports.saveMessage(message);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
  session.actions.updateContext('business_type', input.payload);
  await ports.updateDialogSession(session);
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
  session.actions.advanceToStep('pain_point');
  await ports.updateDialogSession(session);
  
  const painPointChoice: SingleChoiceDto = {
    question: "–ü–æ–Ω—è–ª. –ê –∫–∞–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –≤–∞—Å —Å–µ–π—á–∞—Å —Å–∞–º–∞—è –æ—Å—Ç—Ä–∞—è?",
    options: [
      { id: "leads", text: "–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∑–∞—è–≤–æ–∫/–ª–∏–¥–æ–≤", value: "leads" },
      { id: "managers", text: "–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–µ —Å–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å –ø–æ—Ç–æ–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π", value: "managers" },
      { id: "sales", text: "–•–æ—á—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏/–æ–ø–ª–∞—Ç—ã", value: "sales" },
      { id: "engagement", text: "–ù—É–∂–Ω–æ –≤–æ–≤–ª–µ—á—å –∏ '–ø—Ä–æ–≥—Ä–µ—Ç—å' –∞—É–¥–∏—Ç–æ—Ä–∏—é", value: "engagement" }
    ]
  };
  
  return painPointChoice;
}
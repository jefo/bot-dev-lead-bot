import { z } from 'zod';
import { usePort } from '@maxdev1/sotajs/lib/di.v2';
import { 
  SegmentationChoiceDto,
  QualificationQuestionDto,
  DemonstrationGalleryDto,
  DemonstrationDetailDto,
  LeadCaptureDto,
  WarmupSubscriptionDto,
  LeadCardDto,
  LeadTransferDto
} from '../dtos/extended.dtos';
import {
  showSegmentationPort,
  showQualificationQuestionPort,
  showDemonstrationGalleryPort,
  showDemonstrationDetailPort,
  captureLeadPort,
  showWarmupSubscriptionPort,
  transferLeadPort,
  loggerPort
} from '../../domain/ports/extended.ports';
import {
  findUserByIdPort,
  saveUserPort,
  findDialogSessionByIdPort,
  findActiveDialogSessionByUserIdPort,
  createDialogSessionPort,
  updateDialogSessionPort,
  saveMessagePort
} from '../../domain/ports/bot.ports';
import { 
  User, 
  DialogSession, 
  Message, 
  LeadProfile 
} from '../../domain/entities/extended.entities';
import { UserId, DialogSessionId, MessageId } from '../../domain/shared/ids';

// DTO –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const UserActionDtoSchema = z.object({
  userId: z.string(),
  platform: z.string(),
  actionType: z.enum(['text', 'choice', 'button']),
  payload: z.string().optional(),
  timestamp: z.date(),
});

type UserActionDto = z.infer<typeof UserActionDtoSchema>;

// Use Case 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ë–õ–û–ö 1)
export const handleSegmentationUseCase = async (input: unknown): Promise<SegmentationChoiceDto> => {
  const validInput = UserActionDtoSchema.parse(input);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  const findUserById = usePort(findUserByIdPort);
  const saveUser = usePort(saveUserPort);
  const findActiveDialogSession = usePort(findActiveDialogSessionByUserIdPort);
  const createDialogSession = usePort(createDialogSessionPort);
  const updateDialogSession = usePort(updateDialogSessionPort);
  const saveMessage = usePort(saveMessagePort);
  const log = usePort(loggerPort);
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
  log(`Handling segmentation for user ${validInput.userId}`, { input: validInput });
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let user = await findUserById(validInput.userId);
  if (!user) {
    user = User.create({
      id: UserId.create(validInput.userId).value,
      platform: validInput.platform as any,
      createdAt: new Date(),
      lastActiveAt: new Date(),
    });
    await saveUser(user);
  } else {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    user.actions.updateLastActive();
    await saveUser(user);
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–∏–∞–ª–æ–≥–∞
  let session = await findActiveDialogSession(validInput.userId);
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
  if (!session) {
    session = DialogSession.create({
      id: DialogSessionId.create(crypto.randomUUID()).value,
      userId: UserId.create(validInput.userId).value,
      currentPath: 'segmentation',
      currentStep: 'welcome',
      createdAt: new Date(),
      updatedAt: new Date(),
    });
    session = await createDialogSession(session);
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const message = Message.create({
    id: MessageId.create(crypto.randomUUID()).value,
    sessionId: session.state.id,
    userId: session.state.userId,
    text: validInput.payload,
    direction: 'incoming',
    timestamp: validInput.timestamp,
  });
  await saveMessage(message);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  switch (validInput.payload) {
    case 'qualification':
      session.actions.switchToPath('qualification');
      session.actions.advanceToStep('pain_point');
      await updateDialogSession(session);
      break;
      
    case 'demonstration':
      session.actions.switchToPath('demonstration');
      session.actions.advanceToStep('gallery');
      await updateDialogSession(session);
      break;
      
    case 'direct_contact':
      session.actions.switchToPath('lead_capture');
      session.actions.advanceToStep('capture');
      await updateDialogSession(session);
      break;
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º DTO –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
  const segmentationDto: SegmentationChoiceDto = {
    greeting: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
    description: "–Ø ‚Äî –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º. –ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫ —á–∞—Ç-–±–æ—Ç—ã –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å—É –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω—É –∏ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏.\n\n–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
    options: [
      { id: "qualification", text: "üöÄ –£ –º–µ–Ω—è –µ—Å—Ç—å –∑–∞–¥–∞—á–∞ –¥–ª—è –±–æ—Ç–∞", value: "qualification" },
      { id: "demonstration", text: "ü§î –•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã/–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", value: "demonstration" },
      { id: "direct_contact", text: "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º", value: "direct_contact" }
    ]
  };
  
  return segmentationDto;
};

// Use Case 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ç–∫–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ë–õ–û–ö 2)
export const handleQualificationUseCase = async (input: unknown): Promise<QualificationQuestionDto> => {
  const validInput = UserActionDtoSchema.parse(input);
  
  const findActiveDialogSession = usePort(findActiveDialogSessionByUserIdPort);
  const updateDialogSession = usePort(updateDialogSessionPort);
  const saveMessage = usePort(saveMessagePort);
  const log = usePort(loggerPort);
  
  log(`Handling qualification for user ${validInput.userId}`, { input: validInput });
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
  const session = await findActiveDialogSession(validInput.userId);
  if (!session) {
    throw new Error('No active session found');
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const message = Message.create({
    id: MessageId.create(crypto.randomUUID()).value,
    sessionId: session.state.id,
    userId: session.state.userId,
    text: validInput.payload,
    direction: 'incoming',
    timestamp: validInput.timestamp,
  });
  await saveMessage(message);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
  switch (session.state.currentStep) {
    case 'pain_point':
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
      session.actions.saveQualificationData({ painPoint: validInput.payload });
      await updateDialogSession(session);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      session.actions.advanceToStep('niche');
      await updateDialogSession(session);
      
      const nicheQuestion: QualificationQuestionDto = {
        step: 'niche',
        question: "–í –∫–∞–∫–æ–π –Ω–∏—à–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?",
        options: [
          { id: "ecommerce", text: "E-commerce", value: "ecommerce" },
          { id: "education", text: "–û–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", value: "education" },
          { id: "services", text: "–£—Å–ª—É–≥–∏ (B2C)", value: "services" },
          { id: "b2b", text: "B2B", value: "b2b" },
          { id: "personal", text: "–õ–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥/–≠–∫—Å–ø–µ—Ä—Ç", value: "personal" }
        ]
      };
      
      return nicheQuestion;
      
    case 'niche':
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
      session.actions.saveQualificationData({ niche: validInput.payload });
      await updateDialogSession(session);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      session.actions.advanceToStep('scale');
      await updateDialogSession(session);
      
      const scaleQuestion: QualificationQuestionDto = {
        step: 'scale',
        question: "–ù–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ —Å–µ–π—á–∞—Å –≤–∞—à –ø—Ä–æ–µ–∫—Ç?",
        options: [
          { id: "idea", text: "–¢–æ–ª—å–∫–æ –∏–¥–µ—è", value: "idea" },
          { id: "product", text: "–ï—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç, –Ω–æ –Ω–µ—Ç —Ç—Ä–∞—Ñ–∏–∫–∞", value: "product" },
          { id: "traffic", text: "–ï—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫/–∫–ª–∏–µ–Ω—Ç—ã", value: "traffic" }
        ]
      };
      
      return scaleQuestion;
      
    case 'scale':
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
      session.actions.saveQualificationData({ scale: validInput.payload });
      await updateDialogSession(session);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–¥–∞—á–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏
      session.actions.advanceToStep('value_proposition');
      await updateDialogSession(session);
      
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      // –í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
      const valueProposition: QualificationQuestionDto = {
        step: 'value_proposition',
        question: "–û—Ç–ª–∏—á–Ω–æ! –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ...",
        description: "–î–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç...",
        options: [
          { id: "discuss", text: "–î–∞, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –æ–±—Å—É–¥–∏—Ç—å", value: "discuss" },
          { id: "calculate", text: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å", value: "calculate" },
          { id: "think", text: "–°–ø–∞—Å–∏–±–æ, —è –ø–æ–¥—É–º–∞—é", value: "think" }
        ]
      };
      
      return valueProposition;
      
    default:
      throw new Error(`Unknown qualification step: ${session.state.currentStep}`);
  }
};

// Use Case 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ç–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–ë–õ–û–ö 3)
export const handleDemonstrationUseCase = async (input: unknown): Promise<DemonstrationGalleryDto | DemonstrationDetailDto> => {
  const validInput = UserActionDtoSchema.parse(input);
  
  const findActiveDialogSession = usePort(findActiveDialogSessionByUserIdPort);
  const updateDialogSession = usePort(updateDialogSessionPort);
  const saveMessage = usePort(saveMessagePort);
  const log = usePort(loggerPort);
  
  log(`Handling demonstration for user ${validInput.userId}`, { input: validInput });
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
  const session = await findActiveDialogSession(validInput.userId);
  if (!session) {
    throw new Error('No active session found');
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const message = Message.create({
    id: MessageId.create(crypto.randomUUID()).value,
    sessionId: session.state.id,
    userId: session.state.userId,
    text: validInput.payload,
    direction: 'incoming',
    timestamp: validInput.timestamp,
  });
  await saveMessage(message);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  switch (session.state.currentStep) {
    case 'gallery':
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π
      const galleryDto: DemonstrationGalleryDto = {
        title: "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤",
        description: "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, —á—Ç–æ –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å —á–∞—Ç-–±–æ—Ç—ã:",
        demonstrations: [
          {
            id: "crm",
            title: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM",
            description: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤",
            category: "crm"
          },
          {
            id: "payments",
            title: "–ü—Ä–∏–µ–º –ø–ª–∞—Ç–µ–∂–µ–π",
            description: "–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç",
            category: "payments"
          },
          {
            id: "marketing",
            title: "–†–∞—Å—Å—ã–ª–∫–∏ –∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è",
            description: "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º",
            category: "marketing"
          },
          {
            id: "gamification",
            title: "–ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è",
            description: "–ü–æ–≤—ã—à–µ–Ω–∏–µ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∏–≥—Ä—ã –∏ –∫–æ–Ω–∫—É—Ä—Å—ã",
            category: "gamification"
          }
        ]
      };
      
      return galleryDto;
      
    default:
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      const detailDto: DemonstrationDetailDto = {
        id: validInput.payload || 'default',
        title: "–î–µ—Ç–∞–ª–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏",
        description: "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏",
        benefits: [
          "–≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö",
          "–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏",
          "–£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞"
        ],
        cta: "–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è? –î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ –æ–Ω–∞ –º–æ–∂–µ—Ç —Ä–µ—à–∏—Ç—å –≤–∞—à—É –∑–∞–¥–∞—á—É"
      };
      
      return detailDto;
  }
};

// Use Case 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –ª–∏–¥–∞ (–ë–õ–û–ö 4)
export const handleLeadCaptureUseCase = async (input: unknown): Promise<LeadCaptureDto> => {
  const validInput = UserActionDtoSchema.parse(input);
  
  const findActiveDialogSession = usePort(findActiveDialogSessionByUserIdPort);
  const updateDialogSession = usePort(updateDialogSessionPort);
  const saveMessage = usePort(saveMessagePort);
  const log = usePort(loggerPort);
  
  log(`Handling lead capture for user ${validInput.userId}`, { input: validInput });
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
  const session = await findActiveDialogSession(validInput.userId);
  if (!session) {
    throw new Error('No active session found');
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å
  if (validInput.actionType === 'text' && validInput.payload) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const message = Message.create({
      id: MessageId.create(crypto.randomUUID()).value,
      sessionId: session.state.id,
      userId: session.state.userId,
      text: validInput.payload,
      direction: 'incoming',
      timestamp: validInput.timestamp,
    });
    await saveMessage(message);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞
    session.actions.saveLeadData(validInput.payload);
    await updateDialogSession(session);
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ª–∏–¥–∞
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const confirmationDto: LeadCaptureDto = {
      title: "–°–ø–∞—Å–∏–±–æ!",
      description: "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
      placeholder: ""
    };
    
    return confirmationDto;
  }
  
  // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∑–∞—Ö–≤–∞—Ç–∞ –ª–∏–¥–∞
  const captureDto: LeadCaptureDto = {
    title: "–û—Ç–ª–∏—á–Ω–æ!",
    description: "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.",
    placeholder: "–ù–∞–ø—Ä–∏–º–µ—Ä: –•–æ—á—É —Å–¥–µ–ª–∞—Ç—å –≤–æ—Ä–æ–Ω–∫—É –¥–ª—è –≤–µ–±–∏–Ω–∞—Ä–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–µ –∫—É—Ä—Å–∞...",
    maxLength: 1000
  };
  
  return captureDto;
};

// Use Case 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø—Ä–æ–≥—Ä–µ–≤ (–ë–õ–û–ö 5)
export const handleWarmupSubscriptionUseCase = async (input: unknown): Promise<WarmupSubscriptionDto> => {
  const validInput = UserActionDtoSchema.parse(input);
  
  const findUserById = usePort(findUserByIdPort);
  const saveUser = usePort(saveUserPort);
  const log = usePort(loggerPort);
  
  log(`Handling warmup subscription for user ${validInput.userId}`, { input: validInput });
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let user = await findUserById(validInput.userId);
  if (!user) {
    throw new Error('User not found');
  }
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
  if (validInput.payload === 'yes') {
    user.actions.subscribeToWarmup();
    await saveUser(user);
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
  const subscriptionDto: WarmupSubscriptionDto = {
    title: user.state.isSubscribedToWarmup ? "–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!" : "–ü–æ–Ω–∏–º–∞—é",
    description: user.state.isSubscribedToWarmup 
      ? "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –ë—É–¥–µ–º –Ω–∞ —Å–≤—è–∑–∏!"
      : "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∑–∞–Ω–æ–≤–æ.",
    benefits: [
      "1 –ø–æ–ª–µ–∑–Ω—ã–π –∫–µ–π—Å –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤ –Ω–µ–¥–µ–ª—é",
      "–ë–µ–∑ —Å–ø–∞–º–∞ –∏ —Ä–µ–∫–ª–∞–º—ã",
      "–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏"
    ],
    confirmation: "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ!"
  };
  
  return subscriptionDto;
};

// Use Case 6: –ü–µ—Ä–µ–¥–∞—á–∞ –ª–∏–¥–∞ (–ë–õ–û–ö 6)
export const transferLeadUseCase = async (input: unknown): Promise<LeadCardDto> => {
  const validInput = UserActionDtoSchema.parse(input);
  
  const findUserById = usePort(findUserByIdPort);
  const findActiveDialogSession = usePort(findActiveDialogSessionByUserIdPort);
  const log = usePort(loggerPort);
  
  log(`Transferring lead for user ${validInput.userId}`, { input: validInput });
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–µ—Å—Å–∏–∏
  const user = await findUserById(validInput.userId);
  if (!user) {
    throw new Error('User not found');
  }
  
  const session = await findActiveDialogSession(validInput.userId);
  if (!session) {
    throw new Error('No active session found');
  }
  
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ª–∏–¥–∞
  const leadCard: LeadCardDto = {
    userId: user.state.id,
    username: user.state.username,
    path: session.state.currentPath as any,
    painPoint: session.state.qualificationData?.painPoint,
    niche: session.state.qualificationData?.niche,
    scale: session.state.qualificationData?.scale,
    userMessage: session.state.leadData?.message,
    temperature: 'warm', // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    timestamp: new Date()
  };
  
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ª–∏–¥–∞ —á–µ—Ä–µ–∑ transferLeadPort
  // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ª–∏–¥–∞
  
  return leadCard;
};
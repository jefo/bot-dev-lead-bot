import { z } from 'zod';
import { usePort } from '@maxdev1/sotajs/lib/di.v2';
import {
  IncomingMessageDtoSchema,
  OutgoingMessageDto,
  StartDialogDtoSchema,
  HandleUserChoiceDtoSchema,
  EndDialogDtoSchema,
  TransferToOperatorDtoSchema
} from '../dtos/message.dtos';
import {
  findUserByIdPort,
  saveUserPort,
  findDialogSessionByIdPort,
  findActiveDialogSessionByUserIdPort,
  saveDialogSessionPort,
  loggerPort
} from '../../domain/ports/repository.ports';
import { User, DialogSession } from '../../domain/entities/bot.entities';
import { UserId, DialogSessionId } from '../../domain/shared/ids';

// Use Case 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
export const processMessageUseCase = async (input: unknown): Promise<OutgoingMessageDto> => {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const validInput = IncomingMessageDtoSchema.parse(input);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ —Ö—É–∫–∏
  const findUserById = usePort(findUserByIdPort);
  const findActiveDialogSession = usePort(findActiveDialogSessionByUserIdPort);
  const saveUser = usePort(saveUserPort);
  const saveDialogSession = usePort(saveDialogSessionPort);
  const log = usePort(loggerPort);
  
  // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  log(`Processing message from user ${validInput.userId}`, { input: validInput });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let user = await findUserById(validInput.userId);
  if (!user) {
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    user = User.create({
      id: UserId.create(validInput.userId).value,
      platform: validInput.platform,
      createdAt: new Date(),
    });
    await saveUser(user);
  }
  
  // –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–∏–∞–ª–æ–≥–∞
  let session = await findActiveDialogSession(validInput.userId);
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
  if (!session) {
    const newSession = DialogSession.create({
      id: DialogSessionId.create(crypto.randomUUID()).value,
      userId: UserId.create(validInput.userId).value,
      currentState: 'initial',
      createdAt: new Date(),
      updatedAt: new Date(),
    });
    
    await saveDialogSession(newSession);
    
    return {
      userId: validInput.userId,
      platform: validInput.platform,
      text: "–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.

–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫ —á–∞—Ç-–±–æ—Ç—ã –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å—É –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω—É –∏ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏.

–ì–æ—Ç–æ–≤—ã –∑–∞ 2 –º–∏–Ω—É—Ç—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –∏–º–µ–Ω–Ω–æ –≤–∞–º?",
      buttons: [
        { text: "üöÄ –î–∞, –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç –º–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞" },
        { text: "ü§î –ü—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ —É–º–µ—é—Ç –±–æ—Ç—ã" },
        { text: "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º" }
      ],
      timestamp: new Date(),
    };
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
  switch (session.state.currentState) {
    case 'initial':
      if (validInput.text === "üöÄ –î–∞, –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç –º–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞") {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
        session.actions.updateState('audit_started');
        await saveDialogSession(session);
        
        return {
          userId: validInput.userId,
          platform: validInput.platform,
          text: "–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã –¥–∞—Ç—å —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞.

–î–ª—è –Ω–∞—á–∞–ª–∞, –≤ –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –≤–∞—à –±–∏–∑–Ω–µ—Å?",
          buttons: [
            { text: "–û–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞/–ö—É—Ä—Å—ã" },
            { text: "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω" },
            { text: "–£—Å–ª—É–≥–∏ (—Å–∞–ª–æ–Ω, —Ñ–∏—Ç–Ω–µ—Å)" },
            { text: "B2B" },
            { text: "–î—Ä—É–≥–æ–µ" }
          ],
          timestamp: new Date(),
        };
      } else if (validInput.text === "ü§î –ü—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ —É–º–µ—é—Ç –±–æ—Ç—ã") {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
        session.actions.updateState('demo_mode');
        await saveDialogSession(session);
        
        return {
          userId: validInput.userId,
          platform: validInput.platform,
          text: "–•–æ—Ä–æ—à–æ! –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ç–æ–≥–æ, —á—Ç–æ —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å:

1. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
2. –°–æ–±–∏—Ä–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
3. –ü—Ä–æ–≤–æ–¥–∏—Ç—å –æ–ø—Ä–æ—Å—ã –∏ –∫–≤–∏–∑—ã
4. –ü—Ä–∏–Ω–∏–º–∞—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã

–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–∞–∫–æ–π-—Ç–æ –∏–∑ —ç—Ç–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤?",
          buttons: [
            { text: " FAQ-–±–æ—Ç" },
            { text: " –û–ø—Ä–æ—Å–Ω–∏–∫" },
            { text: " –ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤" },
            { text: " –ù–∞–∑–∞–¥" }
          ],
          timestamp: new Date(),
        };
      } else if (validInput.text === "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º") {
        return {
          userId: validInput.userId,
          platform: validInput.platform,
          text: "–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–µ—Ä–µ–¥–∞–º –≤–∞—à –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.

–ß—Ç–æ–±—ã –µ–º—É –±—ã–ª–æ –ø—Ä–æ—â–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Ä–∞–∑–≥–æ–≤–æ—Ä—É, –Ω–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ –∑–¥–µ—Å—å.

–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É, –∏ –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ Telegram –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
          timestamp: new Date(),
        };
      }
      break;
      
    // –î—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞...
    default:
      return {
        userId: validInput.userId,
        platform: validInput.platform,
        text: "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤?",
        buttons: [
          { text: "üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞" },
          { text: "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º" }
        ],
        timestamp: new Date(),
      };
  }
  
  // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∏ –æ–¥–∏–Ω –∫–µ–π—Å
  return {
    userId: validInput.userId,
    platform: validInput.platform,
    text: "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –µ–≥–æ –∏ —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å —Å –æ—Ç–≤–µ—Ç–æ–º.",
    timestamp: new Date(),
  };
};

// Use Case 2: –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
export const startDialogUseCase = async (input: unknown): Promise<OutgoingMessageDto> => {
  const validInput = StartDialogDtoSchema.parse(input);
  
  const saveDialogSession = usePort(saveDialogSessionPort);
  const log = usePort(loggerPort);
  
  log(`Starting new dialog for user ${validInput.userId}`, { input: validInput });
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –¥–∏–∞–ª–æ–≥–∞
  const newSession = DialogSession.create({
    id: DialogSessionId.create(crypto.randomUUID()).value,
    userId: UserId.create(validInput.userId).value,
    currentState: 'initial',
    createdAt: new Date(),
    updatedAt: new Date(),
  });
  
  await saveDialogSession(newSession);
  
  // –í–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  return {
    userId: validInput.userId,
    platform: validInput.platform,
    text: "–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.

–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫ —á–∞—Ç-–±–æ—Ç—ã –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å—É –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω—É –∏ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏.

–ì–æ—Ç–æ–≤—ã –∑–∞ 2 –º–∏–Ω—É—Ç—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –∏–º–µ–Ω–Ω–æ –≤–∞–º?",
    buttons: [
      { text: "üöÄ –î–∞, –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç –º–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞" },
      { text: "ü§î –ü—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ —É–º–µ—é—Ç –±–æ—Ç—ã" },
      { text: "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º" }
    ],
    timestamp: new Date(),
  };
};

// Use Case 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const handleUserChoiceUseCase = async (input: unknown): Promise<OutgoingMessageDto> => {
  const validInput = HandleUserChoiceDtoSchema.parse(input);
  
  const findDialogSessionById = usePort(findDialogSessionByIdPort);
  const saveDialogSession = usePort(saveDialogSessionPort);
  const log = usePort(loggerPort);
  
  log(`Handling user choice for session ${validInput.sessionId}`, { input: validInput });
  
  const session = await findDialogSessionById(validInput.sessionId);
  if (!session) {
    return {
      userId: validInput.userId,
      platform: 'telegram', // –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      text: "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.",
      buttons: [
        { text: "üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞" }
      ],
      timestamp: new Date(),
    };
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
  
  return {
    userId: validInput.userId,
    platform: 'telegram', // –ø–æ–ª—É—á–∞—Ç—å –∏–∑ —Å–µ—Å—Å–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    text: `–í—ã –≤—ã–±—Ä–∞–ª–∏: ${validInput.choice}. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!`,
    timestamp: new Date(),
  };
};

// Use Case 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
export const endDialogUseCase = async (input: unknown): Promise<OutgoingMessageDto> => {
  const validInput = EndDialogDtoSchema.parse(input);
  
  const findDialogSessionById = usePort(findDialogSessionByIdPort);
  const saveDialogSession = usePort(saveDialogSessionPort);
  const log = usePort(loggerPort);
  
  log(`Ending dialog for session ${validInput.sessionId}`, { input: validInput });
  
  const session = await findDialogSessionById(validInput.sessionId);
  if (session) {
    session.actions.endSession();
    await saveDialogSession(session);
  }
  
  return {
    userId: validInput.userId,
    platform: 'telegram', // –ø–æ–ª—É—á–∞—Ç—å –∏–∑ —Å–µ—Å—Å–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    text: "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è! –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.",
    timestamp: new Date(),
  };
};

// Use Case 5: –ü–µ—Ä–µ–¥–∞—á–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
export const transferToOperatorUseCase = async (input: unknown): Promise<OutgoingMessageDto> => {
  const validInput = TransferToOperatorDtoSchema.parse(input);
  
  const log = usePort(loggerPort);
  
  log(`Transferring session ${validInput.sessionId} to operator`, { input: validInput });
  
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∏–∞–ª–æ–≥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
  
  return {
    userId: validInput.userId,
    platform: 'telegram', // –ø–æ–ª—É—á–∞—Ç—å –∏–∑ —Å–µ—Å—Å–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    text: "–°–µ–∫—É–Ω–¥—É, —è –ø–µ—Ä–µ–¥–∞—é –≤–∞—Å –Ω–∞ –æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
    timestamp: new Date(),
  };
};